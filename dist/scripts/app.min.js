
angular.module('mobileDetect',[]).directive("mobileDetect",function($window,$timeout,$rootScope){return function(scope,element,attrs){var isMobile=function(){if($(document).width()<=1000)
$rootScope.isMobile=true;else
$rootScope.isMobile=false;}
$rootScope.$on('resize::resize',function(){isMobile();});};});angular.module('forceTouchUI',[]).directive("forceTouchUI",function($window,$timeout){return function(scope,element,attrs){var forceTouchUI=function(){var newUserAgent=navigator.userAgent.toLowerCase();var osBlacklist=['x11','macintosh','windows'];for(var i=0;i<osBlacklist.length;++i){newUserAgent=newUserAgent.replace(osBlacklist[i],'android');}
navigator.__defineGetter__('userAgent',function(){return newUserAgent;});}
if('ontouchstart'in window||window.DocumentTouch&&document instanceof DocumentTouch)
forceTouchUI();};});angular.module('idle',[]).directive('detectIdle',function($window,$timeout,$rootScope){return{scope:{index:'@'},link:function(scope,element,attrs){var atomicTemporalValue=1000;var timeToBroadcast=60;var totalTime=atomicTemporalValue*timeToBroadcast;function idleBroadcast(){var t;window.onload=resetTimer;window.onmousemove=resetTimer;window.onmousedown=resetTimer;window.onclick=resetTimer;window.onscroll=resetTimer;window.onkeypress=resetTimer;function broadCast(){if($rootScope.isMapLoaded)
$rootScope.$broadcast('idle::idle');}
function resetTimer(){clearTimeout(t);t=setTimeout(broadCast,totalTime);}}
idleBroadcast();}};});angular.module('inputFocus',[]).directive("inputFocus",function($rootScope,$window,$timeout){return function(scope,element,attrs){element.bind("focus",function(scope){$rootScope.$broadcast('keyboardOpen::keyboardOpen');element.parent().addClass('focus');});element.bind("blur",function(scope){$timeout(function(){$rootScope.$broadcast('keyboardClose::keyboardClose');},1000);if(element.hasClass('ng-pristine')||element.val().length==0)
element.parent().removeClass('focus');});};});'use strict';angular.module("ngAutocomplete",[]).directive('ngAutocomplete',function($parse){return{scope:{details:'=',ngAutocomplete:'=',options:'='},link:function(scope,element,attrs,model){var opts
var initOpts=function(){opts={}
if(scope.options){if(scope.options.types){opts.types=[]
opts.types.push(scope.options.types)}
if(scope.options.bounds){opts.bounds=scope.options.bounds}
if(scope.options.country){opts.componentRestrictions={country:scope.options.country}}}}
initOpts()
var newAutocomplete=function(){scope.gPlace=new google.maps.places.Autocomplete(element[0],opts);google.maps.event.addListener(scope.gPlace,'place_changed',function(){scope.$apply(function(){scope.details=scope.gPlace.getPlace();scope.ngAutocomplete=element.val();});})}
newAutocomplete()
var removeResult=function(){scope.$apply(function(){scope.details=null;scope.ngAutocomplete="";});}
scope.watchOptions=function(){return scope.options};scope.$watch(scope.watchOptions,function(){initOpts()
newAutocomplete()
element[0].value='';scope.ngAutocomplete=element.val();},true);}};});(function(root,factory){if(typeof exports==="object"){module.exports=factory(require('angular'));}else if(typeof define==="function"&&define.amd){define(['angular'],factory);}else{factory(root.angular);}}(this,function(angular){angular.module('ngMap',[]);(function(){'use strict';var Attr2MapOptions;var __MapController=function($scope,$element,$attrs,$parse,_Attr2MapOptions_,NgMap,NgMapPool){Attr2MapOptions=_Attr2MapOptions_;var vm=this;vm.mapOptions;vm.mapEvents;vm.eventListeners;vm.addObject=function(groupName,obj){if(vm.map){vm.map[groupName]=vm.map[groupName]||{};var len=Object.keys(vm.map[groupName]).length;vm.map[groupName][obj.id||len]=obj;if(vm.map instanceof google.maps.Map){if(groupName!="infoWindows"&&obj.setMap){obj.setMap&&obj.setMap(vm.map);}
if(obj.centered&&obj.position){vm.map.setCenter(obj.position);}
(groupName=='markers')&&vm.objectChanged('markers');(groupName=='customMarkers')&&vm.objectChanged('customMarkers');}}};vm.deleteObject=function(groupName,obj){if(obj.map){var objs=obj.map[groupName];for(var name in objs){if(objs[name]===obj){void 0;google.maps.event.clearInstanceListeners(obj);delete objs[name];}}
obj.map&&obj.setMap&&obj.setMap(null);(groupName=='markers')&&vm.objectChanged('markers');(groupName=='customMarkers')&&vm.objectChanged('customMarkers');}};vm.observeAttrSetObj=function(orgAttrs,attrs,obj){if(attrs.noWatcher){return false;}
var attrsToObserve=Attr2MapOptions.getAttrsToObserve(orgAttrs);for(var i=0;i<attrsToObserve.length;i++){var attrName=attrsToObserve[i];attrs.$observe(attrName,NgMap.observeAndSet(attrName,obj));}};vm.zoomToIncludeMarkers=function(){var bounds=new google.maps.LatLngBounds();for(var k1 in vm.map.markers){bounds.extend(vm.map.markers[k1].getPosition());}
for(var k2 in vm.map.customMarkers){bounds.extend(vm.map.customMarkers[k2].getPosition());}
if(vm.mapOptions.maximumZoom){vm.enableMaximumZoomCheck=true;}
vm.map.fitBounds(bounds);};vm.objectChanged=function(group){if(vm.map&&(group=='markers'||group=='customMarkers')&&vm.map.zoomToIncludeMarkers=='auto'){vm.zoomToIncludeMarkers();}};vm.initializeMap=function(){var mapOptions=vm.mapOptions,mapEvents=vm.mapEvents;var lazyInitMap=vm.map;vm.map=NgMapPool.getMapInstance($element[0]);NgMap.setStyle($element[0]);if(lazyInitMap){var filtered=Attr2MapOptions.filter($attrs);var options=Attr2MapOptions.getOptions(filtered);var controlOptions=Attr2MapOptions.getControlOptions(filtered);mapOptions=angular.extend(options,controlOptions);void 0;for(var group in lazyInitMap){var groupMembers=lazyInitMap[group];if(typeof groupMembers=='object'){for(var id in groupMembers){vm.addObject(group,groupMembers[id]);}}}
vm.map.showInfoWindow=vm.showInfoWindow;vm.map.hideInfoWindow=vm.hideInfoWindow;}
mapOptions.zoom=mapOptions.zoom||15;var center=mapOptions.center;if(!mapOptions.center||((typeof center==='string')&&center.match(/\{\{.*\}\}/))){mapOptions.center=new google.maps.LatLng(0,0);}else if(!(center instanceof google.maps.LatLng)){var geoCenter=mapOptions.center;delete mapOptions.center;NgMap.getGeoLocation(geoCenter,mapOptions.geoLocationOptions).then(function(latlng){vm.map.setCenter(latlng);var geoCallback=mapOptions.geoCallback;geoCallback&&$parse(geoCallback)($scope);},function(){if(mapOptions.geoFallbackCenter){vm.map.setCenter(mapOptions.geoFallbackCenter);}});}
vm.map.setOptions(mapOptions);for(var eventName in mapEvents){var event=mapEvents[eventName];var listener=google.maps.event.addListener(vm.map,eventName,event);vm.eventListeners[eventName]=listener;}
vm.observeAttrSetObj(orgAttrs,$attrs,vm.map);vm.singleInfoWindow=mapOptions.singleInfoWindow;google.maps.event.trigger(vm.map,'resize');google.maps.event.addListenerOnce(vm.map,"idle",function(){NgMap.addMap(vm);if(mapOptions.zoomToIncludeMarkers){vm.zoomToIncludeMarkers();}
$scope.map=vm.map;$scope.$emit('mapInitialized',vm.map);if($attrs.mapInitialized){$parse($attrs.mapInitialized)($scope,{map:vm.map});}});if(mapOptions.zoomToIncludeMarkers&&mapOptions.maximumZoom){google.maps.event.addListener(vm.map,'zoom_changed',function(){if(vm.enableMaximumZoomCheck==true){vm.enableMaximumZoomCheck=false;google.maps.event.addListenerOnce(vm.map,'bounds_changed',function(){vm.map.setZoom(Math.min(mapOptions.maximumZoom,vm.map.getZoom()));});}});}};$scope.google=google;var orgAttrs=Attr2MapOptions.orgAttributes($element);var filtered=Attr2MapOptions.filter($attrs);var options=Attr2MapOptions.getOptions(filtered,{scope:$scope});var controlOptions=Attr2MapOptions.getControlOptions(filtered);var mapOptions=angular.extend(options,controlOptions);var mapEvents=Attr2MapOptions.getEvents($scope,filtered);void 0;Object.keys(mapEvents).length&&void 0;vm.mapOptions=mapOptions;vm.mapEvents=mapEvents;vm.eventListeners={};if(options.lazyInit){if(!!$attrs.id&&$attrs.id.startsWith('{{')&&$attrs.id.endsWith('}}')){var idExpression=$attrs.id.slice(2,-2);var mapId=$parse(idExpression)($scope);}else{var mapId=$attrs.id;}
vm.map={id:mapId};NgMap.addMap(vm);}else{vm.initializeMap();}
if(options.triggerResize){google.maps.event.trigger(vm.map,'resize');}
$element.bind('$destroy',function(){NgMapPool.returnMapInstance(vm.map);NgMap.deleteMap(vm);});};__MapController.$inject=['$scope','$element','$attrs','$parse','Attr2MapOptions','NgMap','NgMapPool'];angular.module('ngMap').controller('__MapController',__MapController);})();(function(){'use strict';var parser;var linkFunc=function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];var orgAttrs=parser.orgAttributes(element);var filtered=parser.filter(attrs);var options=parser.getOptions(filtered,{scope:scope});var events=parser.getEvents(scope,filtered);void 0;var layer=getLayer(options,events);mapController.addObject('bicyclingLayers',layer);mapController.observeAttrSetObj(orgAttrs,attrs,layer);element.bind('$destroy',function(){mapController.deleteObject('bicyclingLayers',layer);});};var getLayer=function(options,events){var layer=new google.maps.BicyclingLayer(options);for(var eventName in events){google.maps.event.addListener(layer,eventName,events[eventName]);}
return layer;};var bicyclingLayer=function(Attr2MapOptions){parser=Attr2MapOptions;return{restrict:'E',require:['?^map','?^ngMap'],link:linkFunc};};bicyclingLayer.$inject=['Attr2MapOptions'];angular.module('ngMap').directive('bicyclingLayer',bicyclingLayer);})();(function(){'use strict';var parser,$compile,NgMap;var linkFunc=function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];var filtered=parser.filter(attrs);var options=parser.getOptions(filtered,{scope:scope});var events=parser.getEvents(scope,filtered);var customControlEl=element[0].parentElement.removeChild(element[0]);$compile(customControlEl.innerHTML.trim())(scope);for(var eventName in events){google.maps.event.addDomListener(customControlEl,eventName,events[eventName]);}
mapController.addObject('customControls',customControlEl);var position=options.position;mapController.map.controls[google.maps.ControlPosition[position]].push(customControlEl);element.bind('$destroy',function(){mapController.deleteObject('customControls',customControlEl);});};var customControl=function(Attr2MapOptions,_$compile_,_NgMap_){parser=Attr2MapOptions,$compile=_$compile_,NgMap=_NgMap_;return{restrict:'E',require:['?^map','?^ngMap'],link:linkFunc};};customControl.$inject=['Attr2MapOptions','$compile','NgMap'];angular.module('ngMap').directive('customControl',customControl);})();(function(){'use strict';var parser,$timeout,$compile,NgMap;var CustomMarker=function(options){options=options||{};this.el=document.createElement('div');this.el.style.display='inline-block';this.el.style.visibility="hidden";this.visible=true;for(var key in options){this[key]=options[key];}};var setCustomMarker=function(){CustomMarker.prototype=new google.maps.OverlayView();CustomMarker.prototype.setContent=function(html,scope){this.el.innerHTML=html;this.el.style.position='absolute';if(scope){$compile(angular.element(this.el).contents())(scope);}};CustomMarker.prototype.getDraggable=function(){return this.draggable;};CustomMarker.prototype.setDraggable=function(draggable){this.draggable=draggable;};CustomMarker.prototype.getPosition=function(){return this.position;};CustomMarker.prototype.setPosition=function(position){position&&(this.position=position);if(this.getProjection()&&typeof this.position.lng=='function'){var posPixel=this.getProjection().fromLatLngToDivPixel(this.position);var _this=this;var setPosition=function(){var x=Math.round(posPixel.x-(_this.el.offsetWidth/2));var y=Math.round(posPixel.y-_this.el.offsetHeight-10);_this.el.style.left=x+"px";_this.el.style.top=y+"px";_this.el.style.visibility="visible";};if(_this.el.offsetWidth&&_this.el.offsetHeight){setPosition();}else{$timeout(setPosition,300);}}};CustomMarker.prototype.setZIndex=function(zIndex){zIndex&&(this.zIndex=zIndex);this.el.style.zIndex=this.zIndex;};CustomMarker.prototype.getVisible=function(){return this.visible;};CustomMarker.prototype.setVisible=function(visible){this.el.style.display=visible?'inline-block':'none';this.visible=visible;};CustomMarker.prototype.addClass=function(className){var classNames=this.el.className.trim().split(' ');(classNames.indexOf(className)==-1)&&classNames.push(className);this.el.className=classNames.join(' ');};CustomMarker.prototype.removeClass=function(className){var classNames=this.el.className.split(' ');var index=classNames.indexOf(className);(index>-1)&&classNames.splice(index,1);this.el.className=classNames.join(' ');};CustomMarker.prototype.onAdd=function(){this.getPanes().overlayMouseTarget.appendChild(this.el);};CustomMarker.prototype.draw=function(){this.setPosition();this.setZIndex(this.zIndex);this.setVisible(this.visible);};CustomMarker.prototype.onRemove=function(){this.el.parentNode.removeChild(this.el);};};var linkFunc=function(orgHtml,varsToWatch){return function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];var orgAttrs=parser.orgAttributes(element);var filtered=parser.filter(attrs);var options=parser.getOptions(filtered,{scope:scope});var events=parser.getEvents(scope,filtered);element[0].style.display='none';void 0;var customMarker=new CustomMarker(options);$timeout(function(){scope.$watch('['+varsToWatch.join(',')+']',function(){customMarker.setContent(orgHtml,scope);},true);customMarker.setContent(element[0].innerHTML,scope);var classNames=element[0].firstElementChild.className;customMarker.addClass('custom-marker');customMarker.addClass(classNames);void 0;if(!(options.position instanceof google.maps.LatLng)){NgMap.getGeoLocation(options.position).then(function(latlng){customMarker.setPosition(latlng);});}});void 0;for(var eventName in events){google.maps.event.addDomListener(customMarker.el,eventName,events[eventName]);}
mapController.addObject('customMarkers',customMarker);mapController.observeAttrSetObj(orgAttrs,attrs,customMarker);element.bind('$destroy',function(){mapController.deleteObject('customMarkers',customMarker);});};};var customMarkerDirective=function(_$timeout_,_$compile_,Attr2MapOptions,_NgMap_){parser=Attr2MapOptions;$timeout=_$timeout_;$compile=_$compile_;NgMap=_NgMap_;return{restrict:'E',require:['?^map','?^ngMap'],compile:function(element){setCustomMarker();element[0].style.display='none';var orgHtml=element.html();var matches=orgHtml.match(/{{([^}]+)}}/g);var varsToWatch=[];(matches||[]).forEach(function(match){var toWatch=match.replace('{{','').replace('}}','');if(match.indexOf('::')==-1&&match.indexOf('this.')==-1&&varsToWatch.indexOf(toWatch)==-1){varsToWatch.push(match.replace('{{','').replace('}}',''));}});return linkFunc(orgHtml,varsToWatch);}};};customMarkerDirective.$inject=['$timeout','$compile','Attr2MapOptions','NgMap'];angular.module('ngMap').directive('customMarker',customMarkerDirective);})();(function(){'use strict';var NgMap,$timeout,NavigatorGeolocation;var getDirectionsRenderer=function(options,events){if(options.panel){options.panel=document.getElementById(options.panel)||document.querySelector(options.panel);}
var renderer=new google.maps.DirectionsRenderer(options);for(var eventName in events){google.maps.event.addListener(renderer,eventName,events[eventName]);}
return renderer;};var updateRoute=function(renderer,options){var directionsService=new google.maps.DirectionsService();var request=options;request.travelMode=request.travelMode||'DRIVING';var validKeys=['origin','destination','travelMode','transitOptions','unitSystem','durationInTraffic','waypoints','optimizeWaypoints','provideRouteAlternatives','avoidHighways','avoidTolls','region'];for(var key in request){(validKeys.indexOf(key)===-1)&&(delete request[key]);}
if(request.waypoints){if(request.waypoints=="[]"||request.waypoints===""){delete request.waypoints;}}
var showDirections=function(request){directionsService.route(request,function(response,status){if(status==google.maps.DirectionsStatus.OK){$timeout(function(){renderer.setDirections(response);});}});};if(request.origin&&request.destination){if(request.origin=='current-location'){NavigatorGeolocation.getCurrentPosition().then(function(ll){request.origin=new google.maps.LatLng(ll.coords.latitude,ll.coords.longitude);showDirections(request);});}else if(request.destination=='current-location'){NavigatorGeolocation.getCurrentPosition().then(function(ll){request.destination=new google.maps.LatLng(ll.coords.latitude,ll.coords.longitude);showDirections(request);});}else{showDirections(request);}}};var directions=function(Attr2MapOptions,_$timeout_,_NavigatorGeolocation_,_NgMap_){var parser=Attr2MapOptions;NgMap=_NgMap_;$timeout=_$timeout_;NavigatorGeolocation=_NavigatorGeolocation_;var linkFunc=function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];var orgAttrs=parser.orgAttributes(element);var filtered=parser.filter(attrs);var options=parser.getOptions(filtered,{scope:scope});var events=parser.getEvents(scope,filtered);var attrsToObserve=parser.getAttrsToObserve(orgAttrs);var renderer=getDirectionsRenderer(options,events);mapController.addObject('directionsRenderers',renderer);attrsToObserve.forEach(function(attrName){(function(attrName){attrs.$observe(attrName,function(val){if(attrName=='panel'){$timeout(function(){var panel=document.getElementById(val)||document.querySelector(val);void 0;panel&&renderer.setPanel(panel);});}else if(options[attrName]!==val){var optionValue=parser.toOptionValue(val,{key:attrName});void 0;options[attrName]=optionValue;updateRoute(renderer,options);}});})(attrName);});NgMap.getMap().then(function(){updateRoute(renderer,options);});element.bind('$destroy',function(){mapController.deleteObject('directionsRenderers',renderer);});};return{restrict:'E',require:['?^map','?^ngMap'],link:linkFunc};};directions.$inject=['Attr2MapOptions','$timeout','NavigatorGeolocation','NgMap'];angular.module('ngMap').directive('directions',directions);})();(function(){'use strict';angular.module('ngMap').directive('drawingManager',['Attr2MapOptions',function(Attr2MapOptions){var parser=Attr2MapOptions;return{restrict:'E',require:['?^map','?^ngMap'],link:function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];var filtered=parser.filter(attrs);var options=parser.getOptions(filtered,{scope:scope});var controlOptions=parser.getControlOptions(filtered);var events=parser.getEvents(scope,filtered);var drawingManager=new google.maps.drawing.DrawingManager({drawingMode:options.drawingmode,drawingControl:options.drawingcontrol,drawingControlOptions:controlOptions.drawingControlOptions,circleOptions:options.circleoptions,markerOptions:options.markeroptions,polygonOptions:options.polygonoptions,polylineOptions:options.polylineoptions,rectangleOptions:options.rectangleoptions});attrs.$observe('drawingControlOptions',function(newValue){drawingManager.drawingControlOptions=parser.getControlOptions({drawingControlOptions:newValue}).drawingControlOptions;drawingManager.setDrawingMode(null);drawingManager.setMap(mapController.map);});for(var eventName in events){google.maps.event.addListener(drawingManager,eventName,events[eventName]);}
mapController.addObject('mapDrawingManager',drawingManager);element.bind('$destroy',function(){mapController.deleteObject('mapDrawingManager',drawingManager);});}};}]);})();(function(){'use strict';angular.module('ngMap').directive('dynamicMapsEngineLayer',['Attr2MapOptions',function(Attr2MapOptions){var parser=Attr2MapOptions;var getDynamicMapsEngineLayer=function(options,events){var layer=new google.maps.visualization.DynamicMapsEngineLayer(options);for(var eventName in events){google.maps.event.addListener(layer,eventName,events[eventName]);}
return layer;};return{restrict:'E',require:['?^map','?^ngMap'],link:function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];var filtered=parser.filter(attrs);var options=parser.getOptions(filtered,{scope:scope});var events=parser.getEvents(scope,filtered,events);var layer=getDynamicMapsEngineLayer(options,events);mapController.addObject('mapsEngineLayers',layer);}};}]);})();(function(){'use strict';angular.module('ngMap').directive('fusionTablesLayer',['Attr2MapOptions',function(Attr2MapOptions){var parser=Attr2MapOptions;var getLayer=function(options,events){var layer=new google.maps.FusionTablesLayer(options);for(var eventName in events){google.maps.event.addListener(layer,eventName,events[eventName]);}
return layer;};return{restrict:'E',require:['?^map','?^ngMap'],link:function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];var filtered=parser.filter(attrs);var options=parser.getOptions(filtered,{scope:scope});var events=parser.getEvents(scope,filtered,events);void 0;var layer=getLayer(options,events);mapController.addObject('fusionTablesLayers',layer);}};}]);})();(function(){'use strict';angular.module('ngMap').directive('heatmapLayer',['Attr2MapOptions','$window',function(Attr2MapOptions,$window){var parser=Attr2MapOptions;return{restrict:'E',require:['?^map','?^ngMap'],link:function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];var filtered=parser.filter(attrs);var options=parser.getOptions(filtered,{scope:scope});options.data=$window[attrs.data]||scope[attrs.data];if(options.data instanceof Array){options.data=new google.maps.MVCArray(options.data);}else{throw"invalid heatmap data";}
var layer=new google.maps.visualization.HeatmapLayer(options);var events=parser.getEvents(scope,filtered);void 0;mapController.addObject('heatmapLayers',layer);}};}]);})();(function(){'use strict';var infoWindow=function(Attr2MapOptions,$compile,$timeout,$parse,NgMap){var parser=Attr2MapOptions;var getInfoWindow=function(options,events,element){var infoWindow;if(options.position&&!(options.position instanceof google.maps.LatLng)){delete options.position;}
infoWindow=new google.maps.InfoWindow(options);for(var eventName in events){if(eventName){google.maps.event.addListener(infoWindow,eventName,events[eventName]);}}
var template=element.html().trim();if(angular.element(template).length!=1){throw"info-window working as a template must have a container";}
infoWindow.__template=template.replace(/\s?ng-non-bindable[='"]+/,"");infoWindow.__open=function(map,scope,anchor){$timeout(function(){anchor&&(scope.anchor=anchor);var el=$compile(infoWindow.__template)(scope);infoWindow.setContent(el[0]);scope.$apply();if(anchor&&anchor.getPosition){infoWindow.open(map,anchor);}else if(anchor&&anchor instanceof google.maps.LatLng){infoWindow.open(map);infoWindow.setPosition(anchor);}else{infoWindow.open(map);}
var infoWindowContainerEl=infoWindow.content.parentElement.parentElement.parentElement;infoWindowContainerEl.className="ng-map-info-window";});};return infoWindow;};var linkFunc=function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];element.css('display','none');var orgAttrs=parser.orgAttributes(element);var filtered=parser.filter(attrs);var options=parser.getOptions(filtered,{scope:scope});var events=parser.getEvents(scope,filtered);var address;if(options.position&&!(options.position instanceof google.maps.LatLng)){address=options.position;}
var infoWindow=getInfoWindow(options,events,element);if(address){NgMap.getGeoLocation(address).then(function(latlng){infoWindow.setPosition(latlng);infoWindow.__open(mapController.map,scope,latlng);var geoCallback=attrs.geoCallback;geoCallback&&$parse(geoCallback)(scope);});}
mapController.addObject('infoWindows',infoWindow);mapController.observeAttrSetObj(orgAttrs,attrs,infoWindow);mapController.showInfoWindow=mapController.map.showInfoWindow=mapController.showInfoWindow||function(p1,p2,p3){var id=typeof p1=='string'?p1:p2;var marker=typeof p1=='string'?p2:p3;if(typeof marker=='string'){if(typeof mapController.map.markers!="undefined"&&typeof mapController.map.markers[marker]!="undefined"){marker=mapController.map.markers[marker];}else if(typeof mapController.map.customMarkers&&typeof mapController.map.customMarkers[marker]!="undefined"){marker=mapController.map.customMarkers[marker];}else{throw new Error("Cant open info window for id "+marker+". Marker or CustomMarker is not defined")}}
var infoWindow=mapController.map.infoWindows[id];var anchor=marker?marker:(this.getPosition?this:null);infoWindow.__open(mapController.map,scope,anchor);if(mapController.singleInfoWindow){if(mapController.lastInfoWindow){scope.hideInfoWindow(mapController.lastInfoWindow);}
mapController.lastInfoWindow=id;}};mapController.hideInfoWindow=mapController.map.hideInfoWindow=mapController.hideInfoWindow||function(p1,p2){var id=typeof p1=='string'?p1:p2;var infoWindow=mapController.map.infoWindows[id];infoWindow.close();};scope.showInfoWindow=mapController.map.showInfoWindow;scope.hideInfoWindow=mapController.map.hideInfoWindow;NgMap.getMap().then(function(map){infoWindow.visible&&infoWindow.__open(map,scope);if(infoWindow.visibleOnMarker){var markerId=infoWindow.visibleOnMarker;infoWindow.__open(map,scope,map.markers[markerId]);}});};return{restrict:'E',require:['?^map','?^ngMap'],link:linkFunc};};infoWindow.$inject=['Attr2MapOptions','$compile','$timeout','$parse','NgMap'];angular.module('ngMap').directive('infoWindow',infoWindow);})();(function(){'use strict';angular.module('ngMap').directive('kmlLayer',['Attr2MapOptions',function(Attr2MapOptions){var parser=Attr2MapOptions;var getKmlLayer=function(options,events){var kmlLayer=new google.maps.KmlLayer(options);for(var eventName in events){google.maps.event.addListener(kmlLayer,eventName,events[eventName]);}
return kmlLayer;};return{restrict:'E',require:['?^map','?^ngMap'],link:function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];var orgAttrs=parser.orgAttributes(element);var filtered=parser.filter(attrs);var options=parser.getOptions(filtered,{scope:scope});var events=parser.getEvents(scope,filtered);void 0;var kmlLayer=getKmlLayer(options,events);mapController.addObject('kmlLayers',kmlLayer);mapController.observeAttrSetObj(orgAttrs,attrs,kmlLayer);element.bind('$destroy',function(){mapController.deleteObject('kmlLayers',kmlLayer);});}};}]);})();(function(){'use strict';angular.module('ngMap').directive('mapData',['Attr2MapOptions','NgMap',function(Attr2MapOptions,NgMap){var parser=Attr2MapOptions;return{restrict:'E',require:['?^map','?^ngMap'],link:function(scope,element,attrs){var filtered=parser.filter(attrs);var options=parser.getOptions(filtered,{scope:scope});var events=parser.getEvents(scope,filtered,events);void 0;NgMap.getMap().then(function(map){for(var key in options){var val=options[key];if(typeof scope[val]==="function"){map.data[key](scope[val]);}else{map.data[key](val);}}
for(var eventName in events){map.data.addListener(eventName,events[eventName]);}});}};}]);})();(function(){'use strict';var $timeout,$compile,src,savedHtml;var preLinkFunc=function(scope,element,attrs){var mapsUrl=attrs.mapLazyLoadParams||attrs.mapLazyLoad;window.lazyLoadCallback=function(){void 0;$timeout(function(){element.html(savedHtml);$compile(element.contents())(scope);},100);};if(window.google===undefined||window.google.maps===undefined){var scriptEl=document.createElement('script');void 0;scriptEl.src=mapsUrl+
(mapsUrl.indexOf('?')>-1?'&':'?')+'callback=lazyLoadCallback';if(!document.querySelector('script[src="'+scriptEl.src+'"]')){document.body.appendChild(scriptEl);}}else{element.html(savedHtml);$compile(element.contents())(scope);}};var compileFunc=function(tElement,tAttrs){(!tAttrs.mapLazyLoad)&&void 0;savedHtml=tElement.html();src=tAttrs.mapLazyLoad;if(window.google!==undefined&&window.google.maps!==undefined){return false;}
tElement.html('');return{pre:preLinkFunc};};var mapLazyLoad=function(_$compile_,_$timeout_){$compile=_$compile_,$timeout=_$timeout_;return{compile:compileFunc};};mapLazyLoad.$inject=['$compile','$timeout'];angular.module('ngMap').directive('mapLazyLoad',mapLazyLoad);})();(function(){'use strict';angular.module('ngMap').directive('mapType',['$parse','NgMap',function($parse,NgMap){return{restrict:'E',require:['?^map','?^ngMap'],link:function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];var mapTypeName=attrs.name,mapTypeObject;if(!mapTypeName){throw"invalid map-type name";}
mapTypeObject=$parse(attrs.object)(scope);if(!mapTypeObject){throw"invalid map-type object";}
NgMap.getMap().then(function(map){map.mapTypes.set(mapTypeName,mapTypeObject);});mapController.addObject('mapTypes',mapTypeObject);}};}]);})();(function(){'use strict';var mapDirective=function(){return{restrict:'AE',controller:'__MapController',controllerAs:'ngmap'};};angular.module('ngMap').directive('map',[mapDirective]);angular.module('ngMap').directive('ngMap',[mapDirective]);})();(function(){'use strict';angular.module('ngMap').directive('mapsEngineLayer',['Attr2MapOptions',function(Attr2MapOptions){var parser=Attr2MapOptions;var getMapsEngineLayer=function(options,events){var layer=new google.maps.visualization.MapsEngineLayer(options);for(var eventName in events){google.maps.event.addListener(layer,eventName,events[eventName]);}
return layer;};return{restrict:'E',require:['?^map','?^ngMap'],link:function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];var filtered=parser.filter(attrs);var options=parser.getOptions(filtered,{scope:scope});var events=parser.getEvents(scope,filtered,events);void 0;var layer=getMapsEngineLayer(options,events);mapController.addObject('mapsEngineLayers',layer);}};}]);})();(function(){'use strict';var parser,$parse,NgMap;var getMarker=function(options,events){var marker;if(NgMap.defaultOptions.marker){for(var key in NgMap.defaultOptions.marker){if(typeof options[key]=='undefined'){void 0;options[key]=NgMap.defaultOptions.marker[key];}}}
if(!(options.position instanceof google.maps.LatLng)){options.position=new google.maps.LatLng(0,0);}
marker=new google.maps.Marker(options);if(Object.keys(events).length>0){void 0;}
for(var eventName in events){if(eventName){google.maps.event.addListener(marker,eventName,events[eventName]);}}
return marker;};var linkFunc=function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];var orgAttrs=parser.orgAttributes(element);var filtered=parser.filter(attrs);var markerOptions=parser.getOptions(filtered,scope,{scope:scope});var markerEvents=parser.getEvents(scope,filtered);void 0;var address;if(!(markerOptions.position instanceof google.maps.LatLng)){address=markerOptions.position;}
var marker=getMarker(markerOptions,markerEvents);mapController.addObject('markers',marker);if(address){NgMap.getGeoLocation(address).then(function(latlng){marker.setPosition(latlng);markerOptions.centered&&marker.map.setCenter(latlng);var geoCallback=attrs.geoCallback;geoCallback&&$parse(geoCallback)(scope);});}
mapController.observeAttrSetObj(orgAttrs,attrs,marker);element.bind('$destroy',function(){mapController.deleteObject('markers',marker);});};var marker=function(Attr2MapOptions,_$parse_,_NgMap_){parser=Attr2MapOptions;$parse=_$parse_;NgMap=_NgMap_;return{restrict:'E',require:['^?map','?^ngMap'],link:linkFunc};};marker.$inject=['Attr2MapOptions','$parse','NgMap'];angular.module('ngMap').directive('marker',marker);})();(function(){'use strict';angular.module('ngMap').directive('overlayMapType',['NgMap',function(NgMap){return{restrict:'E',require:['?^map','?^ngMap'],link:function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];var initMethod=attrs.initMethod||"insertAt";var overlayMapTypeObject=scope[attrs.object];NgMap.getMap().then(function(map){if(initMethod=="insertAt"){var index=parseInt(attrs.index,10);map.overlayMapTypes.insertAt(index,overlayMapTypeObject);}else if(initMethod=="push"){map.overlayMapTypes.push(overlayMapTypeObject);}});mapController.addObject('overlayMapTypes',overlayMapTypeObject);}};}]);})();(function(){'use strict';var placesAutoComplete=function(Attr2MapOptions,$timeout){var parser=Attr2MapOptions;var linkFunc=function(scope,element,attrs,ngModelCtrl){if(attrs.placesAutoComplete==='false'){return false;}
var filtered=parser.filter(attrs);var options=parser.getOptions(filtered,{scope:scope});var events=parser.getEvents(scope,filtered);var autocomplete=new google.maps.places.Autocomplete(element[0],options);for(var eventName in events){google.maps.event.addListener(autocomplete,eventName,events[eventName]);}
var updateModel=function(){$timeout(function(){ngModelCtrl&&ngModelCtrl.$setViewValue(element.val());},100);};google.maps.event.addListener(autocomplete,'place_changed',updateModel);element[0].addEventListener('change',updateModel);attrs.$observe('types',function(val){if(val){var optionValue=parser.toOptionValue(val,{key:'types'});autocomplete.setTypes(optionValue);}});};return{restrict:'A',require:'?ngModel',link:linkFunc};};placesAutoComplete.$inject=['Attr2MapOptions','$timeout'];angular.module('ngMap').directive('placesAutoComplete',placesAutoComplete);})();(function(){'use strict';var getShape=function(options,events){var shape;var shapeName=options.name;delete options.name;void 0;switch(shapeName){case"circle":if(!(options.center instanceof google.maps.LatLng)){options.center=new google.maps.LatLng(0,0);}
shape=new google.maps.Circle(options);break;case"polygon":shape=new google.maps.Polygon(options);break;case"polyline":shape=new google.maps.Polyline(options);break;case"rectangle":shape=new google.maps.Rectangle(options);break;case"groundOverlay":case"image":var url=options.url;var opts={opacity:options.opacity,clickable:options.clickable,id:options.id};shape=new google.maps.GroundOverlay(url,options.bounds,opts);break;}
for(var eventName in events){if(events[eventName]){google.maps.event.addListener(shape,eventName,events[eventName]);}}
return shape;};var shape=function(Attr2MapOptions,$parse,NgMap){var parser=Attr2MapOptions;var linkFunc=function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];var orgAttrs=parser.orgAttributes(element);var filtered=parser.filter(attrs);var shapeOptions=parser.getOptions(filtered,{scope:scope});var shapeEvents=parser.getEvents(scope,filtered);var address,shapeType;shapeType=shapeOptions.name;if(!(shapeOptions.center instanceof google.maps.LatLng)){address=shapeOptions.center;}
var shape=getShape(shapeOptions,shapeEvents);mapController.addObject('shapes',shape);if(address&&shapeType=='circle'){NgMap.getGeoLocation(address).then(function(latlng){shape.setCenter(latlng);shape.centered&&shape.map.setCenter(latlng);var geoCallback=attrs.geoCallback;geoCallback&&$parse(geoCallback)(scope);});}
mapController.observeAttrSetObj(orgAttrs,attrs,shape);element.bind('$destroy',function(){mapController.deleteObject('shapes',shape);});};return{restrict:'E',require:['?^map','?^ngMap'],link:linkFunc};};shape.$inject=['Attr2MapOptions','$parse','NgMap'];angular.module('ngMap').directive('shape',shape);})();(function(){'use strict';var streetViewPanorama=function(Attr2MapOptions,NgMap){var parser=Attr2MapOptions;var getStreetViewPanorama=function(map,options,events){var svp,container;if(options.container){container=document.getElementById(options.container);container=container||document.querySelector(options.container);}
if(container){svp=new google.maps.StreetViewPanorama(container,options);}else{svp=map.getStreetView();svp.setOptions(options);}
for(var eventName in events){eventName&&google.maps.event.addListener(svp,eventName,events[eventName]);}
return svp;};var linkFunc=function(scope,element,attrs){var filtered=parser.filter(attrs);var options=parser.getOptions(filtered,{scope:scope});var controlOptions=parser.getControlOptions(filtered);var svpOptions=angular.extend(options,controlOptions);var svpEvents=parser.getEvents(scope,filtered);void 0;NgMap.getMap().then(function(map){var svp=getStreetViewPanorama(map,svpOptions,svpEvents);map.setStreetView(svp);(!svp.getPosition())&&svp.setPosition(map.getCenter());google.maps.event.addListener(svp,'position_changed',function(){if(svp.getPosition()!==map.getCenter()){map.setCenter(svp.getPosition());}});var listener=google.maps.event.addListener(map,'center_changed',function(){svp.setPosition(map.getCenter());google.maps.event.removeListener(listener);});});};return{restrict:'E',require:['?^map','?^ngMap'],link:linkFunc};};streetViewPanorama.$inject=['Attr2MapOptions','NgMap'];angular.module('ngMap').directive('streetViewPanorama',streetViewPanorama);})();(function(){'use strict';angular.module('ngMap').directive('trafficLayer',['Attr2MapOptions',function(Attr2MapOptions){var parser=Attr2MapOptions;var getLayer=function(options,events){var layer=new google.maps.TrafficLayer(options);for(var eventName in events){google.maps.event.addListener(layer,eventName,events[eventName]);}
return layer;};return{restrict:'E',require:['?^map','?^ngMap'],link:function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];var orgAttrs=parser.orgAttributes(element);var filtered=parser.filter(attrs);var options=parser.getOptions(filtered,{scope:scope});var events=parser.getEvents(scope,filtered);void 0;var layer=getLayer(options,events);mapController.addObject('trafficLayers',layer);mapController.observeAttrSetObj(orgAttrs,attrs,layer);element.bind('$destroy',function(){mapController.deleteObject('trafficLayers',layer);});}};}]);})();(function(){'use strict';angular.module('ngMap').directive('transitLayer',['Attr2MapOptions',function(Attr2MapOptions){var parser=Attr2MapOptions;var getLayer=function(options,events){var layer=new google.maps.TransitLayer(options);for(var eventName in events){google.maps.event.addListener(layer,eventName,events[eventName]);}
return layer;};return{restrict:'E',require:['?^map','?^ngMap'],link:function(scope,element,attrs,mapController){mapController=mapController[0]||mapController[1];var orgAttrs=parser.orgAttributes(element);var filtered=parser.filter(attrs);var options=parser.getOptions(filtered,{scope:scope});var events=parser.getEvents(scope,filtered);void 0;var layer=getLayer(options,events);mapController.addObject('transitLayers',layer);mapController.observeAttrSetObj(orgAttrs,attrs,layer);element.bind('$destroy',function(){mapController.deleteObject('transitLayers',layer);});}};}]);})();(function(){'use strict';var SPECIAL_CHARS_REGEXP=/([\:\-\_]+(.))/g;var MOZ_HACK_REGEXP=/^moz([A-Z])/;var camelCaseFilter=function(){return function(name){return name.replace(SPECIAL_CHARS_REGEXP,function(_,separator,letter,offset){return offset?letter.toUpperCase():letter;}).replace(MOZ_HACK_REGEXP,'Moz$1');};};angular.module('ngMap').filter('camelCase',camelCaseFilter);})();(function(){'use strict';var jsonizeFilter=function(){return function(str){try{JSON.parse(str);return str;}catch(e){return str.replace(/([\$\w]+)\s*:/g,function(_,$1){return'"'+$1+'":';}).replace(/'([^']+)'/g,function(_,$1){return'"'+$1+'"';});}};};angular.module('ngMap').filter('jsonize',jsonizeFilter);})();(function(){'use strict';var isoDateRE=/^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*)?)([zZ]|([+\-])(\d\d):?(\d\d))?$/;var Attr2MapOptions=function($parse,$timeout,$log,NavigatorGeolocation,GeoCoder,camelCaseFilter,jsonizeFilter){var orgAttributes=function(el){(el.length>0)&&(el=el[0]);var orgAttributes={};for(var i=0;i<el.attributes.length;i++){var attr=el.attributes[i];orgAttributes[attr.name]=attr.value;}
return orgAttributes;};var getJSON=function(input){var re=/^[\+\-]?[0-9\.]+,[ ]*\ ?[\+\-]?[0-9\.]+$/;if(input.match(re)){input="["+input+"]";}
return JSON.parse(jsonizeFilter(input));};var getLatLng=function(input){var output=input;if(input[0].constructor==Array){output=input.map(function(el){return new google.maps.LatLng(el[0],el[1]);});}else if(!isNaN(parseFloat(input[0]))&&isFinite(input[0])){output=new google.maps.LatLng(output[0],output[1]);}
return output;};var toOptionValue=function(input,options){var output;try{output=getNumber(input);}catch(err){try{var output=getJSON(input);if(output instanceof Array){if(output[0].constructor==Object){output=output;}else{output=getLatLng(output);}}
else if(output===Object(output)){var newOptions=options;newOptions.doNotConverStringToNumber=true;output=getOptions(output,newOptions);}}catch(err2){if(input.match(/^[A-Z][a-zA-Z0-9]+\(.*\)$/)){try{var exp="new google.maps."+input;output=eval(exp);}catch(e){output=input;}}else if(input.match(/^([A-Z][a-zA-Z0-9]+)\.([A-Z]+)$/)){try{var matches=input.match(/^([A-Z][a-zA-Z0-9]+)\.([A-Z]+)$/);output=google.maps[matches[1]][matches[2]];}catch(e){output=input;}}else if(input.match(/^[A-Z]+$/)){try{var capitalizedKey=options.key.charAt(0).toUpperCase()+
options.key.slice(1);if(options.key.match(/temperatureUnit|windSpeedUnit|labelColor/)){capitalizedKey=capitalizedKey.replace(/s$/,"");output=google.maps.weather[capitalizedKey][input];}else{output=google.maps[capitalizedKey][input];}}catch(e){output=input;}}else if(input.match(isoDateRE)){try{output=new Date(input);}catch(e){output=input;}}else if(input.match(/^{/)&&options.scope){try{var expr=input.replace(/{{/,'').replace(/}}/g,'');output=options.scope.$eval(expr);}catch(err){output=input;}}else{output=input;}}}
if((options.key=='center'||options.key=='center')&&output instanceof Array){output=new google.maps.LatLng(output[0],output[1]);}
if(options.key=='bounds'&&output instanceof Array){output=new google.maps.LatLngBounds(output[0],output[1]);}
if(options.key=='icons'&&output instanceof Array){for(var i=0;i<output.length;i++){var el=output[i];if(el.icon.path.match(/^[A-Z_]+$/)){el.icon.path=google.maps.SymbolPath[el.icon.path];}}}
if(options.key=='icon'&&output instanceof Object){if((""+output.path).match(/^[A-Z_]+$/)){output.path=google.maps.SymbolPath[output.path];}
for(var key in output){var arr=output[key];if(key=="anchor"||key=="origin"||key=="labelOrigin"){output[key]=new google.maps.Point(arr[0],arr[1]);}else if(key=="size"||key=="scaledSize"){output[key]=new google.maps.Size(arr[0],arr[1]);}}}
return output;};var getAttrsToObserve=function(attrs){var attrsToObserve=[];if(!attrs.noWatcher){for(var attrName in attrs){var attrValue=attrs[attrName];if(attrValue&&attrValue.match(/\{\{.*\}\}/)){attrsToObserve.push(camelCaseFilter(attrName));}}}
return attrsToObserve;};var filter=function(attrs){var options={};for(var key in attrs){if(key.match(/^\$/)||key.match(/^ng[A-Z]/)){void(0);}else{options[key]=attrs[key];}}
return options;};var getOptions=function(attrs,params){params=params||{};var options={};for(var key in attrs){if(attrs[key]||attrs[key]===0){if(key.match(/^on[A-Z]/)){continue;}else if(key.match(/ControlOptions$/)){continue;}else{if(typeof attrs[key]!=='string'){options[key]=attrs[key];}else{if(params.doNotConverStringToNumber&&attrs[key].match(/^[0-9]+$/)){options[key]=attrs[key];}else{options[key]=toOptionValue(attrs[key],{key:key,scope:params.scope});}}}}}
return options;};var getEvents=function(scope,attrs){var events={};var toLowercaseFunc=function($1){return"_"+$1.toLowerCase();};var EventFunc=function(attrValue){var matches=attrValue.match(/([^\(]+)\(([^\)]*)\)/);var funcName=matches[1];var argsStr=matches[2].replace(/event[ ,]*/,'');var argsExpr=$parse("["+argsStr+"]");return function(event){var args=argsExpr(scope);function index(obj,i){return obj[i];}
var f=funcName.split('.').reduce(index,scope);f&&f.apply(this,[event].concat(args));$timeout(function(){scope.$apply();});};};for(var key in attrs){if(attrs[key]){if(!key.match(/^on[A-Z]/)){continue;}
var eventName=key.replace(/^on/,'');eventName=eventName.charAt(0).toLowerCase()+eventName.slice(1);eventName=eventName.replace(/([A-Z])/g,toLowercaseFunc);var attrValue=attrs[key];events[eventName]=new EventFunc(attrValue);}}
return events;};var getControlOptions=function(filtered){var controlOptions={};if(typeof filtered!='object'){return false;}
for(var attr in filtered){if(filtered[attr]){if(!attr.match(/(.*)ControlOptions$/)){continue;}
var orgValue=filtered[attr];var newValue=orgValue.replace(/'/g,'"');newValue=newValue.replace(/([^"]+)|("[^"]+")/g,function($0,$1,$2){if($1){return $1.replace(/([a-zA-Z0-9]+?):/g,'"$1":');}else{return $2;}});try{var options=JSON.parse(newValue);for(var key in options){if(options[key]){var value=options[key];if(typeof value==='string'){value=value.toUpperCase();}else if(key==="mapTypeIds"){value=value.map(function(str){if(str.match(/^[A-Z]+$/)){return google.maps.MapTypeId[str.toUpperCase()];}else{return str;}});}
if(key==="style"){var str=attr.charAt(0).toUpperCase()+attr.slice(1);var objName=str.replace(/Options$/,'')+"Style";options[key]=google.maps[objName][value];}else if(key==="position"){options[key]=google.maps.ControlPosition[value];}else{options[key]=value;}}}
controlOptions[attr]=options;}catch(e){void 0;}}}
return controlOptions;};return{filter:filter,getOptions:getOptions,getEvents:getEvents,getControlOptions:getControlOptions,toOptionValue:toOptionValue,getAttrsToObserve:getAttrsToObserve,orgAttributes:orgAttributes};};Attr2MapOptions.$inject=['$parse','$timeout','$log','NavigatorGeolocation','GeoCoder','camelCaseFilter','jsonizeFilter'];angular.module('ngMap').service('Attr2MapOptions',Attr2MapOptions);})();(function(){'use strict';var $q;var geocodeFunc=function(options){var deferred=$q.defer();var geocoder=new google.maps.Geocoder();geocoder.geocode(options,function(results,status){if(status==google.maps.GeocoderStatus.OK){deferred.resolve(results);}else{deferred.reject(status);}});return deferred.promise;};var GeoCoder=function(_$q_){$q=_$q_;return{geocode:geocodeFunc};};GeoCoder.$inject=['$q'];angular.module('ngMap').service('GeoCoder',GeoCoder);})();(function(){'use strict';var $q;var getCurrentPosition=function(geoLocationOptions){var deferred=$q.defer();if(navigator.geolocation){if(geoLocationOptions===undefined){geoLocationOptions={timeout:5000};}
else if(geoLocationOptions.timeout===undefined){geoLocationOptions.timeout=5000;}
navigator.geolocation.getCurrentPosition(function(position){deferred.resolve(position);},function(evt){void 0;deferred.reject(evt);},geoLocationOptions);}else{deferred.reject("Browser Geolocation service failed.");}
return deferred.promise;};var NavigatorGeolocation=function(_$q_){$q=_$q_;return{getCurrentPosition:getCurrentPosition};};NavigatorGeolocation.$inject=['$q'];angular.module('ngMap').service('NavigatorGeolocation',NavigatorGeolocation);})();(function(){'use strict';var mapInstances=[];var $window,$document,$timeout;var add=function(el){var mapDiv=$document.createElement("div");mapDiv.style.width="100%";mapDiv.style.height="100%";el.appendChild(mapDiv);var map=new $window.google.maps.Map(mapDiv,{});mapInstances.push(map);return map;};var findById=function(el,id){var notInUseMap;for(var i=0;i<mapInstances.length;i++){var map=mapInstances[i];if(map.id==id&&!map.inUse){var mapDiv=map.getDiv();el.appendChild(mapDiv);notInUseMap=map;break;}}
return notInUseMap;};var findUnused=function(el){var notInUseMap;for(var i=0;i<mapInstances.length;i++){var map=mapInstances[i];if(map.id){continue;}
if(!map.inUse){var mapDiv=map.getDiv();el.appendChild(mapDiv);notInUseMap=map;break;}}
return notInUseMap;};var getMapInstance=function(el){var map=findById(el,el.id)||findUnused(el);if(!map){map=add(el);}else{$timeout(function(){google.maps.event.trigger(map,'idle');},100);}
map.inUse=true;return map;};var returnMapInstance=function(map){map.inUse=false;};var resetMapInstances=function(){for(var i=0;i<mapInstances.length;i++){mapInstances[i]=null;}
mapInstances=[];};var NgMapPool=function(_$document_,_$window_,_$timeout_){$document=_$document_[0],$window=_$window_,$timeout=_$timeout_;return{mapInstances:mapInstances,resetMapInstances:resetMapInstances,getMapInstance:getMapInstance,returnMapInstance:returnMapInstance};};NgMapPool.$inject=['$document','$window','$timeout'];angular.module('ngMap').factory('NgMapPool',NgMapPool);})();(function(){'use strict';var $window,$document,$q;var NavigatorGeolocation,Attr2MapOptions,GeoCoder,camelCaseFilter;var mapControllers={};var getStyle=function(el,styleProp){var y;if(el.currentStyle){y=el.currentStyle[styleProp];}else if($window.getComputedStyle){y=$document.defaultView.getComputedStyle(el,null).getPropertyValue(styleProp);}
return y;};var initMap=function(id){var ctrl=mapControllers[id||0];if(!(ctrl.map instanceof google.maps.Map)){ctrl.initializeMap();return ctrl.map;}else{void 0;}};var getMap=function(id){id=typeof id==='object'?id.id:id;id=id||0;var deferred=$q.defer();var timeout=2000;function waitForMap(timeElapsed){if(mapControllers[id]){deferred.resolve(mapControllers[id].map);}else if(timeElapsed>timeout){deferred.reject('could not find map');}else{$window.setTimeout(function(){waitForMap(timeElapsed+100);},100);}}
waitForMap(0);return deferred.promise;};var addMap=function(mapCtrl){if(mapCtrl.map){var len=Object.keys(mapControllers).length;mapControllers[mapCtrl.map.id||len]=mapCtrl;}};var deleteMap=function(mapCtrl){var len=Object.keys(mapControllers).length-1;var mapId=mapCtrl.map.id||len;if(mapCtrl.map){for(var eventName in mapCtrl.eventListeners){void 0;var listener=mapCtrl.eventListeners[eventName];google.maps.event.removeListener(listener);}
if(mapCtrl.map.controls){mapCtrl.map.controls.forEach(function(ctrl){ctrl.clear();});}}
if(mapCtrl.map.heatmapLayers){Object.keys(mapCtrl.map.heatmapLayers).forEach(function(layer){mapCtrl.deleteObject('heatmapLayers',mapCtrl.map.heatmapLayers[layer]);});}
delete mapControllers[mapId];};var getGeoLocation=function(string,options){var deferred=$q.defer();if(!string||string.match(/^current/i)){NavigatorGeolocation.getCurrentPosition(options).then(function(position){var lat=position.coords.latitude;var lng=position.coords.longitude;var latLng=new google.maps.LatLng(lat,lng);deferred.resolve(latLng);},function(error){deferred.reject(error);});}else{GeoCoder.geocode({address:string}).then(function(results){deferred.resolve(results[0].geometry.location);},function(error){deferred.reject(error);});}
return deferred.promise;};var observeAndSet=function(attrName,object){void 0;return function(val){if(val){var setMethod=camelCaseFilter('set-'+attrName);var optionValue=Attr2MapOptions.toOptionValue(val,{key:attrName});if(object[setMethod]){void 0;if(attrName.match(/center|position/)&&typeof optionValue=='string'){getGeoLocation(optionValue).then(function(latlng){object[setMethod](latlng);});}else{object[setMethod](optionValue);}}}};};var setStyle=function(el){var defaultStyle=el.getAttribute('default-style');if(defaultStyle=="true"){el.style.display='block';el.style.height='300px';}else{if(getStyle(el,'display')!="block"){el.style.display='block';}
if(getStyle(el,'height').match(/^(0|auto)/)){el.style.height='300px';}}};angular.module('ngMap').provider('NgMap',function(){var defaultOptions={};this.setDefaultOptions=function(options){defaultOptions=options;};var NgMap=function(_$window_,_$document_,_$q_,_NavigatorGeolocation_,_Attr2MapOptions_,_GeoCoder_,_camelCaseFilter_){$window=_$window_;$document=_$document_[0];$q=_$q_;NavigatorGeolocation=_NavigatorGeolocation_;Attr2MapOptions=_Attr2MapOptions_;GeoCoder=_GeoCoder_;camelCaseFilter=_camelCaseFilter_;return{defaultOptions:defaultOptions,addMap:addMap,deleteMap:deleteMap,getMap:getMap,initMap:initMap,setStyle:setStyle,getGeoLocation:getGeoLocation,observeAndSet:observeAndSet};};NgMap.$inject=['$window','$document','$q','NavigatorGeolocation','Attr2MapOptions','GeoCoder','camelCaseFilter'];this.$get=NgMap;});})();(function(){'use strict';var $q;var getPanorama=function(map,latlng){latlng=latlng||map.getCenter();var deferred=$q.defer();var svs=new google.maps.StreetViewService();svs.getPanoramaByLocation((latlng||map.getCenter),100,function(data,status){if(status===google.maps.StreetViewStatus.OK){deferred.resolve(data.location.pano);}else{deferred.resolve(false);}});return deferred.promise;};var setPanorama=function(map,panoId){var svp=new google.maps.StreetViewPanorama(map.getDiv(),{enableCloseButton:true});svp.setPano(panoId);};var StreetView=function(_$q_){$q=_$q_;return{getPanorama:getPanorama,setPanorama:setPanorama};};StreetView.$inject=['$q'];angular.module('ngMap').service('StreetView',StreetView);})();return'ngMap';}));angular.module('resize',[]).directive('resize',function($window,$rootScope){return{link:function(scope){angular.element($window).on('resize',function(e){$rootScope.$broadcast('resize::resize');});}}});angular.module('searchActive',[]).directive('searchActive',function($window,$timeout){return{scope:{index:'@'},link:function(scope,element,attrs){element.bind('click',function(){element.addClass('active');$timeout(function(){element.removeClass('active');},200);var timer=0;if($("#menu").hasClass('open')){timer=200;angular.element($("#menu-button-box i")).triggerHandler('click');}
$timeout(function(){if($("#search").hasClass('active'))
$('#search input').blur();else
$("#search input").focus();$("#search").toggleClass('active');},timer);});}};});angular.module('toggleActive',[]).directive('toggleActive',function($window){return{scope:{index:'@'},link:function(scope,element,attrs){element.bind('click',function(){element.toggleClass('active');});}};});angular.module('toggleHeight',[]).directive('toggleChildHeight',function($timeout,$window){return{scope:{index:'@'},link:function(scope,element,attrs){var w=angular.element($window);$timeout(function(){var allBlock=angular.element(element.parent());var totalHeight=allBlock[0].offsetHeight;var linkHeight=42;allBlock.css({height:linkHeight});element.bind('click',function(){$("#accordeon ul li").each(function(){if($(this).children().hasClass("open")){$(this).children("header").removeClass('open');$(this).children(".content-wrapper").removeClass('open');$(this).css({height:linkHeight});}});var actualHeight=allBlock[0].offsetHeight;if(linkHeight!=actualHeight){allBlock.css({height:linkHeight});element.removeClass('open');element.next().removeClass('open');$timeout(function(){angular.element(allBlock.children()[3]).removeClass('open');},500);}
else{allBlock.css({height:totalHeight});element.addClass('open');element.next().addClass('open');$timeout(function(){angular.element(allBlock.children()[3]).addClass('open');},500);}});});scope.$on('resize::resize',function(){$timeout(function(){var allBlock=angular.element(element.parent());var totalHeight=allBlock[0].offsetHeight;var linkHeight=42;allBlock.css({height:linkHeight});element.removeClass('open');element.next().removeClass('open');$timeout(function(){angular.element(allBlock.children()[3]).removeClass('open');},500);});});}};});angular.module('toggleTouchActive',[]).directive('toggleTouchActive',function($window,$timeout){return{scope:{index:'@'},link:function(scope,element,attrs){element.bind('click',function(){element.addClass('active');$timeout(function(){element.removeClass('active');},200);});}};});angular.module('cutFilter',[]).filter('cut',function(){return function(value,wordwise,max,tail){if(!value)return'';max=parseInt(max,10);if(!max)return value;if(value.length<=max)return value;value=value.substr(0,max);if(wordwise){var lastspace=value.lastIndexOf(' ');if(lastspace!=-1){if(value.charAt(lastspace-1)=='.'||value.charAt(lastspace-1)==','){lastspace=lastspace-1;}
value=value.substr(0,lastspace);}}
return value+(tail||' …');};});angular.module('trustHtmlFilter',[]).filter('to_trusted',['$sce',function($sce){return function(text){return $sce.trustAsHtml(text);};}]);function chunk(arr,len){var chunks=[],i=0,n=arr.length;while(i<n){chunks.push(arr.slice(i,i+=len));}
return chunks;}
function now(){return new Date().getTime();};function debounce(func,wait,immediate){var timeout,args,context,timestamp,result;var later=function(){var last=now()-timestamp;if(last<wait&&last>=0){timeout=setTimeout(later,wait-last);}else{timeout=null;if(!immediate){result=func.apply(context,args);if(!timeout)context=args=null;}}};return function(){context=this;args=arguments;timestamp=now();var callNow=immediate&&!timeout;if(!timeout)timeout=setTimeout(later,wait);if(callNow){result=func.apply(context,args);context=args=null;}
return result;};};var addGeojson=function(map,geojson,currentYear){var featuresCollections=[];for(var i in geojson){if(isDeseaseActive(geojson[i].beginDate,geojson[i].endDate,currentYear)){featuresCollections.push(map.data.addGeoJson(geojson[i].featuresCollection));}}
return featuresCollections;}
var removeGeojson=function(map,featuresCollections){for(var i=0;i<featuresCollections.length;i++){for(var y=0;y<featuresCollections[i].length;y++){map.data.remove(featuresCollections[i][y]);}}
return[];}
var updateGeojson=function(map,geojson,featuresCollections,currentYear){featuresCollections=removeGeojson(map,featuresCollections);featuresCollections=addGeojson(map,geojson,currentYear);return featuresCollections;}
var setMapCenter=function(map,position,delay,isMobile){window.setTimeout(function() {if(isMobile)
map.setCenter(position);else
map.panTo(position);},delay);}
var resetMap=function(map,isLoaded,options,isMobile){console.log("resetMapInvoked");if(isLoaded){map.setZoom(options.zoom);setMapCenter(map,options.center,100,isMobile);}}
var isDeseaseActive=function(beginDate,endDate,currentYear){var startMoment=moment(beginDate,"DD-MM-YYYY");if(endDate)
var endMoment=moment(endDate,"DD-MM-YYYY");var currentMoment=moment([currentYear]);var isActive=false;if(!endDate&&!beginDate)
isActive=true;if(!endDate&&currentMoment.isAfter(startMoment))
isActive=true;else if(endDate&&currentMoment.isBetween(startMoment,endMoment))
isActive=true;return isActive;}
var setStyleToMap=function(map){map.data.setStyle(function(feature){var color=feature.getProperty('fillColor');return{fillColor:color,strokeWeight:0.5,fillOpacity:0.2};});}
var setStyleToData=function(geojson){geojson.map(function(desease){var color=desease.color;desease.featuresCollection.features.map(function(feature){feature.properties.fillColor=color;});});}
var arrayToPoly=function(google,arrayOfCoordinates){var arrayOfLatLng=[];for(var key in arrayOfCoordinates)
{var latLng={lat:arrayOfCoordinates[key][1],lng:arrayOfCoordinates[key][0]};arrayOfLatLng[key]=latLng;}
polygon=new google.maps.Polygon({paths:arrayOfLatLng});return polygon;}
var geojsonToPolygons=function(google,geojson){var polygons=[];for(var key in geojson)
{polygons[key]=[];for(var i in geojson[key].featuresCollection.features)
{if(geojson[key].featuresCollection.features[i].geometry.type=="Polygon"){polygons[key].push(arrayToPoly(google,geojson[key].featuresCollection.features[i].geometry.coordinates[0]));}
else if(geojson[key].featuresCollection.features[i].geometry.type=="MultiPolygon"){for(var y in geojson[key].featuresCollection.features[i].geometry.coordinates){polygons[key].push(arrayToPoly(google,geojson[key].featuresCollection.features[i].geometry.coordinates[y][0]));}}}}
return polygons;}
var isMarkerInBounds=function(google,marker,polygons,geojson,currentYear){var response={};response.isAdmissible=true;response.data=[];if(!marker)
return response;var latLng=new google.maps.LatLng(marker.position.lat,marker.position.lng);for(var i in polygons)
{for(var key in polygons[i])
{if(isDeseaseActive(geojson[i].beginDate,geojson[i].endDate,currentYear)){if(google.maps.geometry.poly.containsLocation(latLng,polygons[i][key])){response.isAdmissible=false;response.data.push({name:geojson[i].name,requiredTests:geojson[i].requiredTests,duration:geojson[i].duration});}}}}
return response;}
angular.module('fundoo.services',[]).factory('createDialog',["$document","$compile","$rootScope","$controller","$timeout",function($document,$compile,$rootScope,$controller,$timeout){var defaults={id:null,template:null,templateUrl:null,title:'Default Title',videoUrl:null,success:{label:'OK',fn:null},cancel:{label:'Close',fn:null},controller:null,footerTemplate:null,modalClass:"modal",isVideoClicked:false};var body=$document.find('body');return function Dialog(templateUrl,options,passedInLocals){passedInLocals=options;options=angular.extend({},defaults,options);var key;var idAttr=options.id?' id="'+options.id+'" ':'';var modalEl=angular.element('<div class="'+options.modalClass+' fade"'+idAttr+'>'+'  <div class="modal-overlay" ng-click="$modalCancel()"/>'+'  <div class="modal-dialog">'+'    <div class="modal-content">'+'      <div class="modal-header">'+'        <button type="button" class="modal-close close touch-event" ng-click="$modalCancel()"><i class="lnr lnr-cross fa-2x"/></button>'+'        <h4><i class="lnr lnr-camera-video"/> {{$title}}</h4>'+'      </div>'+' <div class="modal-body">'+'<div id="video-container">'+'  <div id="video-box" ng-init="$isVideoClicked = false">'+'    <div ng-click="$videoClickMask()" ng-if="$isVideoClicked == false">'+'      <div id="play">'+'        <div id="triangle"></div>'+'      </div><img id="video-cover" src="'+options.imgUrl+'"/>'+'   </div> '+'   <iframe  ng-if="$isVideoClicked == true" frameborder="0" width="400" height="300" src="'+options.videoUrl+'?rel=0&theme=dark&color=white&autoplay=1&autohide=1&modestbranding=1&showinfo=0&rel=0&iv_load_policy=3" frameborder="1" allowfullscreen></iframe>'+'  </div>'+'</div>'+'  </div>'+'</div>');var handleEscPressed=function(event){if(event.keyCode===27){scope.$modalCancel();}};var closeFn=function(){body.unbind('keydown',handleEscPressed);$('.modal-close').addClass("active");$timeout(function(){modalEl.addClass('out');},150);$timeout(function(){modalEl.remove();$('.modal-close').removeClass("active");},450);};body.bind('keydown',handleEscPressed);var ctrl,locals,scope=options.scope||$rootScope.$new();scope.$title=options.title;scope.$modalClose=closeFn;scope.$videoClickMask=function(){scope.$isVideoClicked=true;}
scope.$modalCancel=function(){var callFn=options.cancel.fn||closeFn;callFn.call(this);scope.$modalClose();};scope.$modalSuccess=function(){var callFn=options.success.fn||closeFn;callFn.call(this);scope.$modalClose();};scope.$modalSuccessLabel=options.success.label;scope.$modalCancelLabel=options.cancel.label;$compile(modalEl)(scope);body.append(modalEl);$timeout(function(){modalEl.addClass('in');},100);};}]);function Quantity(numOfPcs){var qty=numOfPcs;var percent=numOfPcs/100;this.__defineGetter__("qty",function(){return qty;});this.__defineSetter__("qty",function(val){val=parseInt(val);qty=val;percent=val/100;});this.__defineGetter__("percent",function(){return percent;});this.__defineSetter__("percent",function(val){percent=val;qty=val*100;});}
var app=angular.module('app',['ngAutocomplete','mobileDetect','searchActive','forceTouchUI','trustHtmlFilter','idle','cutFilter','toggleTouchActive','toggleActive','inputFocus','resize','toggleHeight','ui.router','ngMap']);app.config(function($locationProvider,$stateProvider,$urlRouterProvider){$locationProvider.html5Mode({enabled:true,requireBase:false});$urlRouterProvider.when('','/');$locationProvider.hashPrefix('!');moment.locale('fr',{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:'[Demain à] LT',nextWeek:'dddd [à] LT',lastDay:'[Hier à] LT',lastWeek:'dddd [dernier à] LT',sameElse:'L'},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"une année",yy:"%d ans"},ordinalParse:/\d{1,2}(er|ème)/,ordinal:function(number){return number+(number===1?'er':'ème');},meridiemParse:/PD|MD/,isPM:function(input){return input.charAt(0)==='M';},meridiem:function(hours,minutes,isLower){return hours<12?'PD':'MD';},week:{dow:1,doy:4}});$stateProvider.state('home',{url:'/',templateUrl:'/templates/home.html',controller:'homeCtrl',resolve:{optionsProvider:function($q,Options){return Options.getData();},geojsonProvider:function($q,Geojson){return Geojson.getData();}}});});app.run(function($rootScope,$timeout) {$rootScope.isMapLoaded=false;var loadingSteps=["Chargement de l'application","Récupération des données","Création de la zone de danger"];$("#preloader-text").text(loadingSteps[1]);$rootScope.$watch('isMapLoaded',function(){if($rootScope.isMapLoaded){$("#preloader-text").text(loadingSteps[2]);$timeout(function(){$("#preloader-wrapper").addClass("hidden");$("#app-wrapper").removeClass("hidden");},1500);}});});app.factory('Geojson',function($http){var factory={};factory.getData=function(){return $http.get('/getGeojson');};return factory;});app.factory('Options',function($http){var factory={};factory.getData=function(){return $http.get('../ressources/options.json');};return factory;});app.controller('homeCtrl',function($location,geojsonProvider,optionsProvider,$window,$rootScope,$document,$state,$scope,$timeout,$http,NgMap){$scope.options=optionsProvider.data;var polygons=[];var geojson=geojsonProvider.data;setStyleToData(geojson);polygons=geojsonToPolygons(google,geojson);$scope.activeMarkers=[];$scope.isMobile=false;$scope.result="";$scope.search="";$scope.rangeData=6;var year=$scope.currentYear=2016;$scope.details=null;$scope.autocompleteOptions="";$scope.featuresCollections=[];var setAdmissibilityData=function() {var response=isMarkerInBounds(google,$scope.marker,polygons,geojson,$scope.currentYear);$scope.isAdmissible=response.isAdmissible;$scope.deseases=response.data;console.log($scope.deseases);}
var addMarker=function(latLng){$scope.marker={position:{lat:latLng.lat(),lng:latLng.lng()}};console.log({lat:latLng.lat(),lng:latLng.lng()});$scope.$apply();}
$scope.$watch('result',function(oldValue,newValue){if(newValue!==oldValue){if($scope.details)
{var location=$scope.details.geometry.location;$scope.marker={name:"bla",position:{lat:location.lat(),lng:location.lng(),}};setAdmissibilityData();}}});$scope.$watch('marker',function(oldValue,newValue){if(newValue!==oldValue)
setAdmissibilityData();});$scope.$watch('rangeData',function(oldValue,newValue){if(newValue!==oldValue){$scope.currentYear=year-6+parseInt($scope.rangeData);$scope.featuresCollections=updateGeojson($scope.map,geojson,$scope.featuresCollections,$scope.currentYear);$scope.map.data.addListener('click',function(event){addMarker(event.latLng);});$timeout(function(){setAdmissibilityData();},1000)}});$scope.removeResult=function(){$timeout(function(){$(".remove-research-button").removeClass("visible");},300);$scope.search="";$scope.result="";$scope.details=null;$scope.marker=null;}
$scope.$watch('search',function(){if($scope.search!="")
$(".remove-research-button").addClass("visible");else
$(".remove-research-button").removeClass("visible");});NgMap.getMap().then(function(map){$scope.map=map;$rootScope.isMapLoaded=true;map.data.setStyle($scope.options.gmap.overlay.style);$scope.bounds=new google.maps.LatLngBounds();$scope.featuresCollections=addGeojson(map,geojson,$scope.currentYear);setStyleToMap(map);map.data.addListener('click',function(event){addMarker(event.latLng);});google.maps.event.addListener(map,'click',function(event){addMarker(event.latLng);});});var resetAll=function(){resetMap($scope.map,$rootScope.isMapLoaded,$scope.options.gmap,$scope.isMobile);$scope.removeResult();}
$rootScope.$on('idle::idle',function(){resetAll();});var isMobile=function(){if($(document).width()<=1000)
$scope.isMobile=true;else
$scope.isMobile=false;}
var handleResize=debounce(function(){resetMap($scope.map,$rootScope.isMapLoaded,$scope.options.gmap,$scope.isMobile);},600);var isKeyboardOpen=false;$rootScope.$on('keyboardOpen::keyboardOpen',function(){console.log("keyboardOpening");isKeyboardOpen=true;});$rootScope.$on('keyboardClose::keyboardClose',function(){console.log("keyboardClosing");isKeyboardOpen=false;});$rootScope.$on('resize::resize',function(){isMobile();if(!isKeyboardOpen)
handleResize();});});